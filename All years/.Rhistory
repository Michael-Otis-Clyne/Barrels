Pdata24_clean <- Pdata24_clean %>%
dplyr::select(., BARREL, SPECIES, PLANT_ID, TOOTHPICK, QUAD, DESIGNATION, HT_FINAL, FLWR_2, UID, Year)
Pdata25 <- Pdata25 %>%
mutate(PLANT_ID = NA)
Pdata25_clean <- clean_pdata(Pdata25, 2025)
# bind all together
Pdata_all <- bind_rows(Pdata23_test, Pdata24_clean, Pdata25_clean)
Pdata_all <- Pdata_all %>% dplyr::select(., BARREL, SPECIES, PLANT_ID, TOOTHPICK, QUAD, DESIGNATION, HT_FINAL, FLWR_FINAL, UID, Year)
Pdata_all
# bind all together
Pdata_all <- bind_rows(Pdata23_test, Pdata24_clean, Pdata25_clean)
Pdata25_clean
View(Pdata25_clean)
view(Cdata25)
Cdata_all
head(Cdata_all, 20)
View(Cdata_all)
Cdata25
Cdata24
Cdata23
Cdata23 <- Pdata23 %>% dplyr::select(BARREL, SPECIES) %>%
count(BARREL, SPECIES, name = "count")
Cdata23
Cdata23
library(tidyverse)
library(stringr)
library(readxl)
# Set WD for Desktop
# setwd("~/GitHub/Barrels")
# Set WD for laptop
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
################
### ALL DATA ###
################
# read in all data
Pdata23 <- read_xlsx("Barrel_Data_2023_FINAL.xlsx")
Cdata23 <- Pdata23 %>% dplyr::select(BARREL, SPECIES) %>%
count(BARREL, SPECIES, name = "count")
Cdata23 <- Cdata23 %>% # Remove all Unknown plants
subset(., SPECIES != "U") %>%
subset(., SPECIES !="UG") %>%
subset(., SPECIES != "UD")
Cdata24 <- read_xlsx("2024 Data_Clean.xlsx", sheet = 1)
Pdata24 <- read_xlsx("2024 Data_Clean.xlsx", sheet = 2)
Cdata25 <- read_xlsx("Copy of 2025 Data.xlsx", sheet = 1) # counts of species in each barrel
Pdata25 <- read_xlsx("Copy of 2025 Data.xlsx", sheet = 2)
# clean it up
Pdata25 <- Pdata25[, -3] # extra row
################
# Tidying time #
################
#### Counts data ###
# 2023 #
Cdata23 <- Cdata23 %>%
rename_with(~ "total", .cols = any_of("count")) %>%  # rename count -> total if present
mutate(Year = 2023)
# 2024 #
Cdata24 <- Cdata24 %>%
rename(., BARREL = `Barrel ID`, BRTE = `BRTE count`, LAGL = `LAGL count`, ELEL = `ELEL count`, ARTR = `ARTR count`) %>%
mutate(across(c(BRTE, LAGL, ELEL, ARTR), ~replace_na(., 0)))%>%
mutate(BARREL = as.numeric(BARREL))
Cdata24 <- Cdata24[-161,]
# 2025 #
Cdata25 <- Cdata25 %>%
rename(., BARREL = Barrel, BRTE = `BRTE count`, LAGL = `LAGL count`, ELEL = `ELEL count`, ARTR = `ARTR count`) %>%
mutate(across(c(BRTE, LAGL, ELEL, ARTR), ~replace_na(., 0))) %>%
mutate(BARREL = as.numeric(BARREL))
Cdata25 <- Cdata25[-161,]
view(Cdata25)
# helper function to reshape and summarise a single year
summarise_year <- function(df, year) {
df %>%
mutate(across(c(BRTE, LAGL, ELEL, ARTR), ~replace_na(., 0))) %>%
pivot_longer(
cols = c(BRTE, LAGL, ELEL, ARTR),
names_to = "SPECIES",
values_to = "count"
) %>%
group_by(BARREL, SPECIES) %>%
summarise(total = sum(count), .groups = "drop") %>%
mutate(Year = year)
}
# apply to each dataset
Cdata_all <- bind_rows(
Cdata23,
summarise_year(Cdata24, 2024),
summarise_year(Cdata25, 2025)
) %>%
mutate(
BARREL = as.numeric(BARREL),
total  = as.numeric(total),
Year   = as.integer(Year)
) %>%
arrange(Year, BARREL, SPECIES)
head(Cdata_all, 20)
#  function to standardize column names
clean_pdata <- function(df, year) {
df %>%
# rename to standard names
rename(
BARREL = matches("BARREL"),
SPECIES = SPECIES,
PLANT_ID = matches("PLANT ?ID"),
TOOTHPICK = TOOTHPICK,
QUAD = QUAD,
HT_1 = matches("HT_1"),
AorD_1 = matches("AorD_1"),
DATE_1 = matches("DATE_1"),
FLWR_1 = matches("FLWR_1"),
NOTES_1 = matches("NOTES_1"),
HT_FINAL = matches(c("HT_2", "Height_8")),
AorD_2 = matches("AorD_2"),
DATE_2 = matches("DATE_2"),
FLWR_2 = matches("FLWR_2"),
NOTES_2 = matches("NOTES_2"),
DESIGNATION = matches("DESIGNATION|DESIGN")
) %>%
# add missing cols if not present in this year
mutate(
PLANT_ID = coalesce(PLANT_ID, as.numeric(NA)),
DESIGNATION = if (!"DESIGNATION" %in% names(.)) NA_character_ else DESIGNATION,
HT_FINAL = as.numeric(HT_FINAL),
FLWR_FINAL = as.numeric(FLWR_2)
) %>%
# assign unique ID
mutate(
UID = str_c("B", BARREL, "_", SPECIES, "_", TOOTHPICK, "_Q", QUAD, "_", row_number()),
Year = year
)
}
# apply to each year
Pdata23_clean <- clean_pdata(Pdata23, 2023)
Pdata23_test <- Pdata23_clean %>% dplyr::select(., BARREL, SPECIES, PLANT_ID, TOOTHPICK, QUAD, DESIGNATION, HT_FINAL, FLWR_9, UID, Year) %>%
mutate(., DESIGNATION = ifelse(SPECIES == "BRTE", "I-F",
ifelse(SPECIES == "LAGL", "N-F",
ifelse(SPECIES == "ELEL", "N-M",
ifelse(SPECIES == "ARTR", "N-S", NA))))) %>% rename(.,FLWR_FINAL = FLWR_9)
Pdata24_clean <- clean_pdata(Pdata24, 2024)
Pdata24_clean <- Pdata24_clean %>%
dplyr::select(., BARREL, SPECIES, PLANT_ID, TOOTHPICK, QUAD, DESIGNATION, HT_FINAL, FLWR_2, UID, Year)
Pdata25 <- Pdata25 %>%
mutate(PLANT_ID = NA)
Pdata25_clean
# bind all together
Pdata_all <- bind_rows(Pdata23_test, Pdata24_clean, Pdata25_clean)
Pdata_all <- Pdata_all %>% dplyr::select(., BARREL, SPECIES, PLANT_ID, TOOTHPICK, QUAD, DESIGNATION, HT_FINAL, FLWR_FINAL, UID, Year)
Pdata_all
library(tidyverse)
# Scatterplot with smoothing
Pdata_all %>%
filter(!is.na(FLWR_FINAL)) %>%   # only keep plants with flowers recorded
ggplot(aes(x = HT_FINAL, y = FLWR_FINAL, color = factor(Year))) +
geom_point(alpha = 0.4, position = position_jitter(width = 0.5, height = 0)) +
geom_smooth(method = "loess", se = TRUE) +
labs(x = "Final Height (cm)", y = "Number of Inflorescences",
color = "Year") +
theme_minimal()
survival <- Pdata_all %>%
group_by(PLANT_ID) %>%
summarize(years_present = list(sort(unique(Year)))) %>%
unnest(years_present) %>%
group_by(Year = years_present) %>%
summarize(survived_to_next = sum((Year + 1) %in% years_present))
survival
###############################################################################
# LOESS smoother
p_loess <- Pdata_all %>%
filter(!is.na(HT_FINAL), !is.na(FLWR_FINAL)) %>%
ggplot(aes(x = HT_FINAL, y = FLWR_FINAL, color = factor(Year))) +
geom_point(alpha = 0.4, position = position_jitter(width = 0.5, height = 0)) +
geom_smooth(method = "loess", se = TRUE) +
labs(
x = "Final Height (cm)",
y = "Number of Inflorescences",
color = "Year"
) +
theme_minimal()
# GAM smoother
p_gam <- Pdata_all %>%
filter(!is.na(HT_FINAL), !is.na(FLWR_FINAL)) %>%
ggplot(aes(x = HT_FINAL, y = FLWR_FINAL, color = factor(Year))) +
geom_point(alpha = 0.4, position = position_jitter(width = 0.5, height = 0)) +
geom_smooth(method = "gam", formula = y ~ s(x), se = TRUE) +
labs(
x = "Final Height (cm)",
y = "Number of Inflorescences",
color = "Year"
) +
theme_minimal()
###############################################################################
# 2) Recruitment: number of new plants per year
###############################################################################
recruits <- Pdata_all %>%
group_by(PLANT_ID) %>%
summarize(first_year = min(Year), .groups = "drop") %>%
count(first_year, name = "num_recruits")
###############################################################################
# 3) Survival: number of plants that persist to the next year
###############################################################################
survival <- Pdata_all %>%
group_by(PLANT_ID) %>%
summarize(years_present = list(sort(unique(Year))), .groups = "drop") %>%
unnest(years_present) %>%
group_by(PLANT_ID) %>%
mutate(next_year = lead(years_present)) %>%
filter(!is.na(next_year)) %>%
group_by(years_present) %>%
summarize(survived_to_next = sum(next_year == years_present + 1),
.groups = "drop") %>%
rename(Year = years_present)
###############################################################################
# 4) Quick summaries: mean size and flower production by species & year
###############################################################################
summaries <- Pdata_all %>%
group_by(Year, SPECIES) %>%
summarize(
mean_size = mean(HT_FINAL, na.rm = TRUE),
mean_flwr = mean(FLWR_FINAL, na.rm = TRUE),
n_plants = n(),
.groups = "drop"
)
recruits
survival <- Pdata_all %>%
group_by(PLANT_ID) %>%
summarize(years_present = list(sort(unique(Year))), .groups = "drop") %>%
unnest(years_present) %>%
group_by(PLANT_ID) %>%
mutate(next_year = lead(years_present)) %>%
filter(!is.na(next_year)) %>%
group_by(years_present) %>%
summarize(survived_to_next = sum(next_year == years_present + 1),
.groups = "drop") %>%
rename(Year = years_present)
survival
summaries
Cdata23 <- Cdata23 %>% # Remove all Unknown plants
subset(., SPECIES != "U") %>%
subset(., SPECIES !="UG") %>%
subset(., SPECIES != "UD")
Cdata24 <- read_xlsx("2024 Data_Clean.xlsx", sheet = 1)
Pdata24 <- read_xlsx("2024 Data_Clean.xlsx", sheet = 2)
Cdata25 <- read_xlsx("Copy of 2025 Data.xlsx", sheet = 1) # counts of species in each barrel
Pdata25 <- read_xlsx("Copy of 2025 Data.xlsx", sheet = 2)
# clean it up
Pdata25 <- Pdata25[, -3] # extra row
################
# Tidying time #
################
#### Counts data ###
# 2023 #
Cdata23 <- Cdata23 %>%
rename_with(~ "total", .cols = any_of("count")) %>%  # rename count -> total if present
mutate(Year = 2023)
Pdata_all
# Assign each barrel the treatments and LH combos
barrelkey <- read.csv("barrel_key.csv")
barrelkey$Species <- gsub("_[^_]+$","", barrelkey$Trt)
#remove trailing part about if control or not; irrelevant bc this is 1 year only
#barrelkey$LH_combo <- gsub("_[^_]+$","", barrelkey$LH_combo)
# remove the LH combo in the trt column
barrelkey$Trt <- gsub(".*_", "", barrelkey$Trt)
head(barrelkey)
#looks like it worked well; now to add life history key (manually)
unique(barrelkey$Trt)
barrelkey <- as_tibble(barrelkey %>% mutate(., Trt=as.factor(Trt)))
head(barrelkey)
#B = cheatgrass = F
#A = sagebrush = S
#L = whitedaisy = F
#E = bottlebrush = M
barrelkey <- barrelkey %>%
mutate(
LH_combo = ifelse(Species == "LE" | Species == "BE", "FM",
ifelse(Species == "BL", "FF",
ifelse(Species == "AL" | Species == "BA", "FS", NA)))
)
head(barrelkey)
barrelkey
barrelkey$Species
gsub("_[^_]+$","", barrelkey$Trt)
# Assign each barrel the treatments and LH combos
barrelkey <- read.csv("barrel_key.csv")
barrelkey
barrelkey$Species <- gsub("_[^_]+$","", barrelkey$Trt)
barrelkey
#remove trailing part about if control or not; irrelevant bc this is 1 year only
#barrelkey$LH_combo <- gsub("_[^_]+$","", barrelkey$LH_combo)
# remove the LH combo in the trt column
barrelkey$Trt <- gsub(".*_", "", barrelkey$Trt)
barrelkey
head(barrelkey)
unique(barrelkey$Trt)
barrelkey <- as_tibble(barrelkey %>% mutate(., Trt=as.factor(Trt)))
head(barrelkey)
barrelkey
barrelkey <- barrelkey %>%
mutate(
LH_combo = ifelse(Species == "LE" | Species == "BE", "FM",
ifelse(Species == "BL", "FF",
ifelse(Species == "AL" | Species == "BA", "FS", NA)))
)
head(barrelkey)
View(Pdata_all)
Pdata_all$Trt = NA
Pdata_all$LH_combo = NA
Pdata_all$Spec.TRT=NA
#fill in based on info in barrel key:
for (i in 1:nrow(Pdata_all)) {
Pdata_all$Trt[i] = barrelkey$Trt[barrelkey$BARREL == Pdata_all$BARREL[i]]
Pdata_all$LH_combo[i] = barrelkey$LH_combo[barrelkey$BARREL == Pdata_all$BARREL[i]]
Pdata_all$Spec.TRT[i] = barrelkey$Species[barrelkey$BARREL==Pdata_all$BARREL[i]]
}
Pdata_all
barrelkey$Trt
Pdata_all
head(Pdata_all, 20)
head(Pdata_all, 20)
Pdata_all
check <- ggplot(data = Pdata_all, mapping = aes(x = SPECIES, y= HT_FINAL))
check
Pdata_all <- Pdata_all %>% # Remove all Unknown plants
subset(., SPECIES != "U") %>%
subset(., SPECIES !="UG") %>%
subset(., SPECIES != "UD")
which(Pdata_all$SPECIES = "U")
which(Pdata_all$SPECIES, "U")
Pdata_all <- Pdata_all %>% # Remove all Unknown plants
subset(., SPECIES != "U") %>%
subset(., SPECIES !="UG") %>%
subset(., SPECIES != "UD")
check <- ggplot(data = Pdata_all, mapping = aes(x = SPECIES, y= HT_FINAL))
check
check <- ggplot(data = Pdata_all, mapping = aes(x = SPECIES, y= HT_FINAL)) %>%
geom_bar()
check
check <- ggplot(data = Pdata_all, mapping = aes(x = SPECIES, y= HT_FINAL)) %>%
geom_boxplot()
check
check <- ggplot(data = Pdata_all, mapping = aes(x = SPECIES, y= HT_FINAL)) +
geom_boxplot()
check
diff.plot <- Cdata_all %>%
mutate(., Trt = ifelse(Trt == "1", "Control", "Repeated")) %>%
mutate(., BARREL = `Barrel ID`,
"I-F" = as.numeric(BRTE),
"N-F" = as.numeric(LAGL),
"N-M" = as.numeric(`ELEL count`),
"N-S" = as.numeric(`ARTR count`)) %>%
select(., BARREL, Trt, "I-F", "N-F", "N-M", "N-S")
Cdata_all
diff.plot <- Cdata_all %>%
mutate(., Trt = ifelse(Trt == "1", "Control", "Repeated")) %>%
diff.plot
diff.plot <- Cdata_all %>%
mutate(., Trt = ifelse(Trt == "1", "Control", "Repeated"))
Cdata_all
Cdata_all$Trt = NA
Cdata_all$LH_combo = NA
Cdata_all$Spec.TRT=NA
#fill in based on info in barrel key:
for (i in 1:nrow(Pdata_all)) {
Cdata_all$Trt[i] = barrelkey$Trt[barrelkey$BARREL == Cdata_all$BARREL[i]]
Cdata_all$LH_combo[i] = barrelkey$LH_combo[barrelkey$BARREL == Cdata_all$BARREL[i]]
Cdata_all$Spec.TRT[i] = barrelkey$Species[barrelkey$BARREL==Cdata_all$BARREL[i]]
}
diff.plot <- Cdata_all %>%
mutate(., Trt = ifelse(Trt == "1", "Control", "Repeated")) %>%
mutate(., BARREL = `Barrel ID`,
"I-F" = as.numeric(BRTE),
"N-F" = as.numeric(LAGL),
"N-M" = as.numeric(`ELEL count`),
"N-S" = as.numeric(`ARTR count`)) %>%
select(., BARREL, Trt, "I-F", "N-F", "N-M", "N-S")
#fill in based on info in barrel key:
for (i in 1:nrow(Pdata_all)) {
Cdata_all$Trt[i] = barrelkey$Trt[barrelkey$BARREL == Cdata_all$BARREL[i]]
Cdata_all$LH_combo[i] = barrelkey$LH_combo[barrelkey$BARREL == Cdata_all$BARREL[i]]
Cdata_all$Spec.TRT[i] = barrelkey$Species[barrelkey$BARREL==Cdata_all$BARREL[i]]
}
Cdata_all
Cdata_all$Spec.TRT=NA
#fill in based on info in barrel key:
for (i in 1:nrow(Pdata_all)) {
Cdata_all$Trt[i] = barrelkey$Trt[barrelkey$BARREL == Cdata_all$BARREL[i]]
Cdata_all$LH_combo[i] = barrelkey$LH_combo[barrelkey$BARREL == Cdata_all$BARREL[i]]
Cdata_all$Spec.TRT[i] = barrelkey$Species[barrelkey$BARREL==Cdata_all$BARREL[i]]
}
#fill in based on info in barrel key:
for (i in 1:nrow(Cdata_all)) {
Cdata_all$Trt[i] = barrelkey$Trt[barrelkey$BARREL == Cdata_all$BARREL[i]]
Cdata_all$LH_combo[i] = barrelkey$LH_combo[barrelkey$BARREL == Cdata_all$BARREL[i]]
Cdata_all$Spec.TRT[i] = barrelkey$Species[barrelkey$BARREL==Cdata_all$BARREL[i]]
}
diff.plot <- Cdata_all %>%
mutate(., Trt = ifelse(Trt == "1", "Control", "Repeated")) %>%
mutate(., BARREL = `Barrel ID`,
"I-F" = as.numeric(BRTE),
"N-F" = as.numeric(LAGL),
"N-M" = as.numeric(`ELEL count`),
"N-S" = as.numeric(`ARTR count`)) %>%
select(., BARREL, Trt, "I-F", "N-F", "N-M", "N-S")
Cdata_all
Cdata_all
Cdata_all %>%
mutate(., Trt = ifelse(Trt == "1", "Control", "Repeated"))
diff.plot <- Cdata_all %>%
mutate(., Trt = ifelse(Trt == "1", "Control", "Repeated")) %>%
mutate(., BARREL = `Barrel ID`,
"I-F" = as.numeric(BRTE),
"N-F" = as.numeric(LAGL),
"N-M" = as.numeric(`ELEL count`),
"N-S" = as.numeric(`ARTR count`)) %>%
select(., BARREL, Trt, "I-F", "N-F", "N-M", "N-S")
diff.plot <- Cdata_all %>%
mutate(., Trt = ifelse(Trt == "1", "Control", "Repeated")) %>%
mutate(., BARREL = `Barrel ID`,
"I-F" = as.numeric(BRTE),
"N-F" = as.numeric(LAGL),
"N-M" = as.numeric(`ELEL count`),
"N-S" = as.numeric(`ARTR count`))
diff.plot <- Cdata_all %>%
mutate(., Trt = ifelse(Trt == "1", "Control", "Repeated")) %>%
mutate(., "I-F" = as.numeric(BRTE),
"N-F" = as.numeric(LAGL),
"N-M" = as.numeric(`ELEL count`),
"N-S" = as.numeric(`ARTR count`)) %>%
select(., BARREL, Trt, "I-F", "N-F", "N-M", "N-S")
diff.plot <- Cdata_all %>%
mutate(., Trt = ifelse(Trt == "1", "Control", "Repeated")) %>%
mutate(., "I-F" = as.numeric(BRTE),
"N-F" = as.numeric(LAGL),
"N-M" = as.numeric(`ELEL count`),
"N-S" = as.numeric(`ARTR count`))
Cdata_all
Cdata_all
diff.plot <- Cdata_all %>%
mutate(., Trt = ifelse(Trt == "1", "Control", "Repeated"))
diff.plot
ggplot(data = diff.plot, mapping = aes(x = SPECIES, y = total)) +
geom_boxplot(stat = "identity")
ggplot(data = diff.plot, mapping = aes(x = SPECIES, y = total)) +
geom_boxplot(mapping = aes(color = Year))
ggplot(data = diff.plot, mapping = aes(x = SPECIES, y = total)) +
geom_boxplot(aes(color = Year))
Cdata_all
count_new <- Cdata_all %>%
select(BARREL, SPECIES, total, Trt) %>%
pivot_wider(names_from = SPECIES, values_from = total, values_fill = 0)
# Step 1. Pivot wide to match old "count24"
count_new <- Cdata_all %>%
select(BARREL, SPECIES, total, Trt) %>%
pivot_wider(names_from = SPECIES, values_from = total, values_fill = 0)
conflict_prefer("select", "dplyr")
library(conflicted)
conflict_prefer("select", "dplyr")
ep 1. Pivot wide to match old "count24"
# Step 1. Pivot wide to match old "count24"
count_new <- Cdata_all %>%
select(BARREL, SPECIES, total, Trt) %>%
pivot_wider(names_from = SPECIES, values_from = total, values_fill = 0)
rlang::last_trace()
count_new <- Cdata_all %>%
select(BARREL, SPECIES, total, Trt) %>%
pivot_wider(
names_from = SPECIES,
values_from = total,
values_fill = list(total = 0)
)
rlang::last_trace()
rlang::last_trace(drop = FALSE)
count_new <- Cdata_all %>%
select(BARREL, SPECIES, total, Trt) %>%
tidyr::pivot_wider(
names_from = SPECIES,
values_from = total,
values_fill = 0   # no list, just a plain 0
)
Cdata_all
Cdata_all %>%
select(BARREL, SPECIES, total, Trt)
count_new <- Cdata_all %>%
select(BARREL, SPECIES, total, Trt) %>%
tidyr::pivot_wider(
names_from = SPECIES,
values_from = total,
values_fill = 0   # no list, just a plain 0
)
total
Cdata_all
count_new <- Cdata_all %>%
select(BARREL, SPECIES, total, Trt) %>%
tidyr::pivot_wider(
names_from = SPECIES,
values_from = total,
values_fill = list(total = as.numeric(0))
)
packageVersion("tidyr")
install.packages(c("abind", "AlgDesign", "ape", "asbio", "askpass", "bayesplot", "bayestestR", "BH", "bigD", "bit", "bit64", "bitops", "bookdown", "boot", "brms", "broom", "bslib", "Cairo", "car", "checkmate", "class", "classInt", "cli", "clubSandwich", "cluster", "colorspace", "commonmark", "corrplot", "cowplot", "cpp11", "crosstalk", "curl", "data.table", "datawizard", "dbplyr", "Deriv", "DHARMa", "diffobj", "digest", "distributional", "doBy", "DT", "dtplyr", "e1071", "effects", "effectsize", "elevatr", "evaluate", "fastmatch", "FNN", "fontawesome", "foreign", "fs", "future", "future.apply", "gap", "gargle", "generics", "ggeffects", "ggh4x", "ggplot2", "ggpubr", "ggrepel", "ggridges", "glmmTMB", "globals", "glue", "googledrive", "googlesheets4", "GPArotation", "gstat", "gt", "gWidgets2", "gWidgets2tcltk", "haven", "httpuv", "igraph", "inline", "insight", "inspectdf", "intervals", "jpeg", "jsonlite", "KernSmooth", "knitr", "later", "lattice", "lavaan", "lme4", "lubridate", "maps", "markdown", "MASS", "Matrix", "MatrixModels", "matrixStats", "mgcv", "microbenchmark", "mime", "miniUI", "minqa", "mvtnorm", "ncdf4", "nFactors", "nlme", "nloptr", "nnet", "openssl", "parallelly", "parameters", "patchwork", "pbkrtest", "performance", "permute", "phangorn", "phytools", "pillar", "pixmap", "pkgbuild", "plotly", "posterior", "processx", "progressr", "promises", "ps", "psych", "purrr", "qgam", "quantreg", "QuickJSR", "R6", "ragg", "raster", "rbibutils", "Rcpp", "RcppArmadillo", "RcppEigen", "RcppParallel", "Rdpack", "reactR", "readxl", "rlang", "rmarkdown", "rpart", "rprojroot", "rstan", "rstantools", "rstudioapi", "rsvg", "rvest", "s2", "sandwich", "sass", "scales", "sf", "sftime", "shiny", "sjmisc", "sjPlot", "sjstats", "sp", "spacetime", "spatial", "StanHeaders", "stars", "stringi", "stringr", "survey", "survival", "svglite", "sys", "systemfonts", "terra", "testthat", "textshaping", "TH.data", "threejs", "tibble", "tinytex", "TMB", "tzdb", "units", "usmap", "usmapdata", "utf8", "uuid", "V8", "vegan", "visNetwork", "waldo", "withr", "wk", "writexl", "xfun", "xml2", "xts", "yaml", "zoo"))
count_new <- Cdata_all %>%
select(BARREL, SPECIES, total, Trt) %>%
tidyr::pivot_wider(
names_from = SPECIES,
values_from = total,
values_fill = list(total = as.numeric(0))
)
library(tidyverse)
# Step 2. Recode treatment (match old labels)
count_new <- count_new %>%
mutate(Trt = recode(Trt,
`1` = "Control",
`2` = "Repeated"))
library(tidyverse)
