}
}
szout <- numeric(6)
########## start TIME loop ############
for(t in 1: yrs_max){
if (t == 1){
for (y in 1:classes){
szout[y]=SdData[s]*grow_1[y,1]*surv[y] #First year recruits from seed-- new recruits grow then survive.
}
}
else{
szout = kern%*%szout
}
predout[,p,s,t] <- szout
}######## end TIME loop ###########
} ####### end SITE loop #########
print(p)
} ####### end PARAMETER loop #########
# s = 10
# p = 10
#### Parameter loop (p) #######
for(p in 1:length(bclimg)){
Gs = Kg%*%(Galpha[p,]*sigmaG[p])
Ss = Ks%*%(Salpha[p,] *sigmaS[p])
############# start site loop (site = s) ##############
for (s in 1:nsites) {
mug <- grow(growb0[p], growbs[p], bclimg[p,], X_sub[s,], Mmid, Gs[s]*sigmaG[p])
surv <- survive(survb0[p], survbS[p], bclims[p,], X_sub[s,], Mmid, Ss[s]*sigmaS[p])
fec <- fecund(fecdb0[p], fecdbS[p], bclimf[p,], X_sub[s,], Mmid, 0) # set Fs to 0 for
#come up with all the ways plants can get to size Y, given it started in column X
#/loop over all combos of size class x and y
grow_mat <- matrix(0,sizes, sizes)
for (y in 1:classes){ #loop over all combos of size STARTING with Y
for (x in 1:classes){ # running through all the X given a fixed Y
grow_mat[y,x]= dnorm(Mmid[y], mug[x], growS[s])
#Calculate probability of transitioning from one size class [x] to another [y]
}
}
#re-normalize by columns
grow_1 <- matrix(0, classes, classes)
##Loop back over x (columns) to normalize
for (x in 1:classes){
##pulls out column and summing all the X's
grow_1[,x]=grow_mat[,x]/sum(grow_mat[,x]) #normalize each column (x) to sum to 1
}
kern <- matrix(0, classes, classes) #density kernal that combines all vital rates
for (y in 1:classes){ #come up with all the ways plants can get to size Y, given it started in column X
for (x in 1:classes){ # loops over size classes to construct kernal
# come up with all the ways plants can get to size Y, given it started in column X
kern[y,x] = grow_1[y,x]*surv[x]+fec[x]*grow_1[y,1]*surv[y] #construct kernal
}
}
szout <- numeric(6)
########## start TIME loop ############
for(t in 1: yrs_max){
if (t == 1){
for (y in 1:classes){
szout[y]=SdData[s]*grow_1[y,1]*surv[y] #First year recruits from seed-- new recruits grow then survive.
}
}
else{
szout = kern%*%szout
}
predout[,p,s,t] <- szout
}######## end TIME loop ###########
} ####### end SITE loop #########
print(p)
} ####### end PARAMETER loop #########
trans_area
plot(apply(predout[5,,130,],2,median))
plot(apply(predout[5,,50,],2,median))
plot(apply(predout[5,,130,],2,median))
years
sz.pred = matrix(NA, nrow =nsites , ncol = sizes)
for(i in 1:sizes){  # pulls sites specific, year observed data for all sizes
for (s in 1:nsites){
sz.pred[s,i] <- median(predout[i,,s,years[s]])*50 #size 1 at site s, in first year
}
}
sz.pred
sz.pred = matrix(NA, nrow =nsites , ncol = sizes)
sz.pred = matrix(0, nrow =nsites , ncol = sizes)
for(i in 1:sizes){  # pulls sites specific, year observed data for all sizes
for (s in 1:nsites){
sz.pred[s,i] <- median(predout[i,,s,years[s]])*50 #size 1 at site s, in first year
}
}
sz.pred
nsites
trans_area
nsites
# load in model data
setwd("/Volumes/GoogleDrive/My Drive/Hatch/Hatch/Data/model outputs (1)/With spatial")
load("elev_sp.RData")
# Set WD and load in functions
setwd("/Volumes/GoogleDrive/My Drive/Hatch/Hatch/Scripts Code/Forecast scripts")
source("forecast functions.R")
# load in  validation covariate data
load("/Volumes/GoogleDrive/My Drive/Hatch/Hatch/Data/Data/Validation data/ARTR2 Data/Validation covariate env.RData")
#extract parameters
params <- rstan::extract(elevmodel, c( "bclimg","bclimf","bclims", "survb0", "survbS", "growb0", "growbS",
"fecdb0", "fecdbS","growS", "Galpha", "Fs" , "Salpha", "sigmaG", "sigmaS", "sigmaF"))
bclimg = params$bclimg
bclimf = params$bclimf
bclims = params$bclims
growb0 = params$growb0
growbs = params$growbS
growS = params$growS
survb0 = params$survb0
survbS = params$survbS
fecdb0 = params$fecdb0
fecdbS = params$fecdbS
Galpha = params$Galpha #this changes to alpha in spatial models
Salpha = params$Salpha #this changes to alpha in spatial models
Fs = params$Fs
sigmaG = params$sigmaG
sigmaS = params$sigmaS
# s = 10
# p = 10
#### Parameter loop (p) #######
for(p in 1:length(bclimg)){
Gs = Kg%*%(Galpha[p,]*sigmaG[p])
Ss = Ks%*%(Salpha[p,] *sigmaS[p])
############# start site loop (site = s) ##############
for (s in 1:nsites) {
mug <- grow(growb0[p], growbs[p], bclimg[p,], X_sub[s,], Mmid, Gs[s])
surv <- survive(survb0[p], survbS[p], bclims[p,], X_sub[s,], Mmid, Ss[s])
fec <- fecund(fecdb0[p], fecdbS[p], bclimf[p,], X_sub[s,], Mmid, 0) # set Fs to 0 for
#come up with all the ways plants can get to size Y, given it started in column X
#/loop over all combos of size class x and y
grow_mat <- matrix(0,sizes, sizes)
for (y in 1:classes){ #loop over all combos of size STARTING with Y
for (x in 1:classes){ # running through all the X given a fixed Y
grow_mat[y,x]= dnorm(Mmid[y], mug[x], growS[s])
#Calculate probability of transitioning from one size class [x] to another [y]
}
}
#re-normalize by columns
grow_1 <- matrix(0, classes, classes)
##Loop back over x (columns) to normalize
for (x in 1:classes){
##pulls out column and summing all the X's
grow_1[,x]=grow_mat[,x]/sum(grow_mat[,x]) #normalize each column (x) to sum to 1
}
kern <- matrix(0, classes, classes) #density kernal that combines all vital rates
for (y in 1:classes){ #come up with all the ways plants can get to size Y, given it started in column X
for (x in 1:classes){ # loops over size classes to construct kernal
# come up with all the ways plants can get to size Y, given it started in column X
kern[y,x] = grow_1[y,x]*surv[x]+fec[x]*grow_1[y,1]*surv[y] #construct kernal
}
}
szout <- numeric(6)
########## start TIME loop ############
for(t in 1: yrs_max){
if (t == 1){
for (y in 1:classes){
szout[y]=SdData[s]*grow_1[y,1]*surv[y] #First year recruits from seed-- new recruits grow then survive.
}
}
else{
szout = kern%*%szout
}
predout[,p,s,t] <- szout
}######## end TIME loop ###########
} ####### end SITE loop #########
print(p)
} ####### end PARAMETER loop #########
#ending size distribution for sites
Mmid = (c(2.5,10,22.5,52.5,97.5,142.5)) - mean((c(2.5,10,22.5,52.5,97.5,142.5))) #midpoint for size-classes
# s = 10
# p = 10
#### Parameter loop (p) #######
for(p in 1:length(bclimg)){
Gs = Kg%*%(Galpha[p,]*sigmaG[p])
Ss = Ks%*%(Salpha[p,] *sigmaS[p])
############# start site loop (site = s) ##############
for (s in 1:nsites) {
mug <- grow(growb0[p], growbs[p], bclimg[p,], X_sub[s,], Mmid, Gs[s])
surv <- survive(survb0[p], survbS[p], bclims[p,], X_sub[s,], Mmid, Ss[s])
fec <- fecund(fecdb0[p], fecdbS[p], bclimf[p,], X_sub[s,], Mmid, 0) # set Fs to 0 for
#come up with all the ways plants can get to size Y, given it started in column X
#/loop over all combos of size class x and y
grow_mat <- matrix(0,sizes, sizes)
for (y in 1:classes){ #loop over all combos of size STARTING with Y
for (x in 1:classes){ # running through all the X given a fixed Y
grow_mat[y,x]= dnorm(Mmid[y], mug[x], growS[s])
#Calculate probability of transitioning from one size class [x] to another [y]
}
}
#re-normalize by columns
grow_1 <- matrix(0, classes, classes)
##Loop back over x (columns) to normalize
for (x in 1:classes){
##pulls out column and summing all the X's
grow_1[,x]=grow_mat[,x]/sum(grow_mat[,x]) #normalize each column (x) to sum to 1
}
kern <- matrix(0, classes, classes) #density kernal that combines all vital rates
for (y in 1:classes){ #come up with all the ways plants can get to size Y, given it started in column X
for (x in 1:classes){ # loops over size classes to construct kernal
# come up with all the ways plants can get to size Y, given it started in column X
kern[y,x] = grow_1[y,x]*surv[x]+fec[x]*grow_1[y,1]*surv[y] #construct kernal
}
}
szout <- numeric(6)
########## start TIME loop ############
for(t in 1: yrs_max){
if (t == 1){
for (y in 1:classes){
szout[y]=SdData[s]*grow_1[y,1]*surv[y] #First year recruits from seed-- new recruits grow then survive.
}
}
else{
szout = kern%*%szout
}
predout[,p,s,t] <- szout
}######## end TIME loop ###########
} ####### end SITE loop #########
print(p)
} ####### end PARAMETER loop #########
# s = nsites = length(ARTR.all$PlotID) #  number of sites
classes = 6
# s = 10
# p = 10
#### Parameter loop (p) #######
for(p in 1:length(bclimg)){
Gs = Kg%*%(Galpha[p,]*sigmaG[p])
Ss = Ks%*%(Salpha[p,] *sigmaS[p])
############# start site loop (site = s) ##############
for (s in 1:nsites) {
mug <- grow(growb0[p], growbs[p], bclimg[p,], X_sub[s,], Mmid, Gs[s])
surv <- survive(survb0[p], survbS[p], bclims[p,], X_sub[s,], Mmid, Ss[s])
fec <- fecund(fecdb0[p], fecdbS[p], bclimf[p,], X_sub[s,], Mmid, 0) # set Fs to 0 for
#come up with all the ways plants can get to size Y, given it started in column X
#/loop over all combos of size class x and y
grow_mat <- matrix(0,sizes, sizes)
for (y in 1:classes){ #loop over all combos of size STARTING with Y
for (x in 1:classes){ # running through all the X given a fixed Y
grow_mat[y,x]= dnorm(Mmid[y], mug[x], growS[s])
#Calculate probability of transitioning from one size class [x] to another [y]
}
}
#re-normalize by columns
grow_1 <- matrix(0, classes, classes)
##Loop back over x (columns) to normalize
for (x in 1:classes){
##pulls out column and summing all the X's
grow_1[,x]=grow_mat[,x]/sum(grow_mat[,x]) #normalize each column (x) to sum to 1
}
kern <- matrix(0, classes, classes) #density kernal that combines all vital rates
for (y in 1:classes){ #come up with all the ways plants can get to size Y, given it started in column X
for (x in 1:classes){ # loops over size classes to construct kernal
# come up with all the ways plants can get to size Y, given it started in column X
kern[y,x] = grow_1[y,x]*surv[x]+fec[x]*grow_1[y,1]*surv[y] #construct kernal
}
}
szout <- numeric(6)
########## start TIME loop ############
for(t in 1: yrs_max){
if (t == 1){
for (y in 1:classes){
szout[y]=SdData[s]*grow_1[y,1]*surv[y] #First year recruits from seed-- new recruits grow then survive.
}
}
else{
szout = kern%*%szout
}
predout[,p,s,t] <- szout
}######## end TIME loop ###########
} ####### end SITE loop #########
print(p)
} ####### end PARAMETER loop #########
# years = ARTR.all$Date_sampled - ARTR.all$`Fire year`#years between fire and monitoring
yrs_max = max(years)
years
# years = ARTR.all$Date_sampled - ARTR.all$`Fire year`#years between fire and monitoring
years = plotdata$YrSampled - plotdata$YrOf1stSummer_FromSiteInfo
years
yrs_max = max(years)
yrs_max
# years = ARTR.all$Date_sampled - ARTR.all$`Fire year`#years between fire and monitoring
years = plotdata$YrSampled - plotdata$YrOf1stSummer_FromSiteInfo
yrs_max = max(years)
yrs_max = max(years)
yrs_max
# s = 10
# p = 10
#### Parameter loop (p) #######
for(p in 1:length(bclimg)){
Gs = Kg%*%(Galpha[p,]*sigmaG[p])
Ss = Ks%*%(Salpha[p,] *sigmaS[p])
############# start site loop (site = s) ##############
for (s in 1:nsites) {
mug <- grow(growb0[p], growbs[p], bclimg[p,], X_sub[s,], Mmid, Gs[s])
surv <- survive(survb0[p], survbS[p], bclims[p,], X_sub[s,], Mmid, Ss[s])
fec <- fecund(fecdb0[p], fecdbS[p], bclimf[p,], X_sub[s,], Mmid, 0) # set Fs to 0 for
#come up with all the ways plants can get to size Y, given it started in column X
#/loop over all combos of size class x and y
grow_mat <- matrix(0,sizes, sizes)
for (y in 1:classes){ #loop over all combos of size STARTING with Y
for (x in 1:classes){ # running through all the X given a fixed Y
grow_mat[y,x]= dnorm(Mmid[y], mug[x], growS[s])
#Calculate probability of transitioning from one size class [x] to another [y]
}
}
#re-normalize by columns
grow_1 <- matrix(0, classes, classes)
##Loop back over x (columns) to normalize
for (x in 1:classes){
##pulls out column and summing all the X's
grow_1[,x]=grow_mat[,x]/sum(grow_mat[,x]) #normalize each column (x) to sum to 1
}
kern <- matrix(0, classes, classes) #density kernal that combines all vital rates
for (y in 1:classes){ #come up with all the ways plants can get to size Y, given it started in column X
for (x in 1:classes){ # loops over size classes to construct kernal
# come up with all the ways plants can get to size Y, given it started in column X
kern[y,x] = grow_1[y,x]*surv[x]+fec[x]*grow_1[y,1]*surv[y] #construct kernal
}
}
szout <- numeric(6)
########## start TIME loop ############
for(t in 1: yrs_max){
if (t == 1){
for (y in 1:classes){
szout[y]=SdData[s]*grow_1[y,1]*surv[y] #First year recruits from seed-- new recruits grow then survive.
}
}
else{
szout = kern%*%szout
}
predout[,p,s,t] <- szout
}######## end TIME loop ###########
} ####### end SITE loop #########
print(p)
} ####### end PARAMETER loop #########
# ___________________________ Forecast ___________________________
# create predout array
predout <- array(NA, dim = c(6, length(bclimg),nsites, yrs_max)) # yrs will only be for model fit, will need to add years for forecast?
# s = 10
# p = 10
#### Parameter loop (p) #######
for(p in 1:length(bclimg)){
Gs = Kg%*%(Galpha[p,]*sigmaG[p])
Ss = Ks%*%(Salpha[p,] *sigmaS[p])
############# start site loop (site = s) ##############
for (s in 1:nsites) {
mug <- grow(growb0[p], growbs[p], bclimg[p,], X_sub[s,], Mmid, Gs[s])
surv <- survive(survb0[p], survbS[p], bclims[p,], X_sub[s,], Mmid, Ss[s])
fec <- fecund(fecdb0[p], fecdbS[p], bclimf[p,], X_sub[s,], Mmid, 0) # set Fs to 0 for
#come up with all the ways plants can get to size Y, given it started in column X
#/loop over all combos of size class x and y
grow_mat <- matrix(0,sizes, sizes)
for (y in 1:classes){ #loop over all combos of size STARTING with Y
for (x in 1:classes){ # running through all the X given a fixed Y
grow_mat[y,x]= dnorm(Mmid[y], mug[x], growS[s])
#Calculate probability of transitioning from one size class [x] to another [y]
}
}
#re-normalize by columns
grow_1 <- matrix(0, classes, classes)
##Loop back over x (columns) to normalize
for (x in 1:classes){
##pulls out column and summing all the X's
grow_1[,x]=grow_mat[,x]/sum(grow_mat[,x]) #normalize each column (x) to sum to 1
}
kern <- matrix(0, classes, classes) #density kernal that combines all vital rates
for (y in 1:classes){ #come up with all the ways plants can get to size Y, given it started in column X
for (x in 1:classes){ # loops over size classes to construct kernal
# come up with all the ways plants can get to size Y, given it started in column X
kern[y,x] = grow_1[y,x]*surv[x]+fec[x]*grow_1[y,1]*surv[y] #construct kernal
}
}
szout <- numeric(6)
########## start TIME loop ############
for(t in 1: yrs_max){
if (t == 1){
for (y in 1:classes){
szout[y]=SdData[s]*grow_1[y,1]*surv[y] #First year recruits from seed-- new recruits grow then survive.
}
}
else{
szout = kern%*%szout
}
predout[,p,s,t] <- szout
}######## end TIME loop ###########
} ####### end SITE loop #########
print(p)
} ####### end PARAMETER loop #########
SdData
# s = 10
# p = 10
#### Parameter loop (p) #######
for(p in 1:length(bclimg)){
Gs = Kg%*%(Galpha[p,]*sigmaG[p])
Ss = Ks%*%(Salpha[p,] *sigmaS[p])
############# start site loop (site = s) ##############
for (s in 1:nsites) {
mug <- grow(growb0[p], growbs[p], bclimg[p,], X_sub[s,], Mmid, Gs[s])
surv <- survive(survb0[p], survbS[p], bclims[p,], X_sub[s,], Mmid, Ss[s])
fec <- fecund(fecdb0[p], fecdbS[p], bclimf[p,], X_sub[s,], Mmid, 0) # set Fs to 0 for
#come up with all the ways plants can get to size Y, given it started in column X
#/loop over all combos of size class x and y
grow_mat <- matrix(0,sizes, sizes)
for (y in 1:classes){ #loop over all combos of size STARTING with Y
for (x in 1:classes){ # running through all the X given a fixed Y
grow_mat[y,x]= dnorm(Mmid[y], mug[x], growS[s])
#Calculate probability of transitioning from one size class [x] to another [y]
}
}
#re-normalize by columns
grow_1 <- matrix(0, classes, classes)
##Loop back over x (columns) to normalize
for (x in 1:classes){
##pulls out column and summing all the X's
grow_1[,x]=grow_mat[,x]/sum(grow_mat[,x]) #normalize each column (x) to sum to 1
}
kern <- matrix(0, classes, classes) #density kernal that combines all vital rates
for (y in 1:classes){ #come up with all the ways plants can get to size Y, given it started in column X
for (x in 1:classes){ # loops over size classes to construct kernal
# come up with all the ways plants can get to size Y, given it started in column X
kern[y,x] = grow_1[y,x]*surv[x]+fec[x]*grow_1[y,1]*surv[y] #construct kernal
}
}
szout <- numeric(6)
########## start TIME loop ############
for(t in 1: yrs_max){
if (t == 1){
for (y in 1:classes){
szout[y]=SdData[s]*grow_1[y,1]*surv[y] #First year recruits from seed-- new recruits grow then survive.
}
}
else{
szout = kern%*%szout
}
predout[,p,s,t] <- szout
}######## end TIME loop ###########
} ####### end SITE loop #########
print(p)
} ####### end PARAMETER loop #########
nsites
for(i in 1:sizes){  # pulls sites specific, year observed data for all sizes
for (s in 1:nsites){
sz.pred[s,i] <- median(predout[i,,s,years[s]], na.rm = T)*trans_areas[s] #size 1 at site s, in first year
}
}
trans_areas
sz.pred[s,i] <- median(predout[i,,s,years[s]], na.rm = T)*trans_area[s] #size 1 at site s, in first year
sz.pred = matrix(0, nrow =nsites , ncol = sizes)
for(i in 1:sizes){  # pulls sites specific, year observed data for all sizes
for (s in 1:nsites){
sz.pred[s,i] <- median(predout[i,,s,years[s]], na.rm = T)*trans_area[s] #size 1 at site s, in first year
}
}
sz.pred
# observed data
sz.obs = matrix(NA, nrow =nsites , ncol = sizes)
for(i in 1:nsites){
sz.obs[i,1] <- plotdata$nARTR2_L5cm[i]
sz.obs[i,2] <- plotdata$nARTR2_5_15cm[i]
sz.obs[i,3] <- plotdata$nARTR2_15_30cm[i]
sz.obs[i,4] <- plotdata$nARTR2_30_75cm[i]
sz.obs[i,5] <- plotdata$nARTR2_75_120cm[i]
sz.obs[i,6] <- plotdata$nARTR2_G120cmHt[i]
}
plot(sz.obs,
sz.pred,
xlab = "Observed Values",
ylab = "Predicted Values",)
years
sizes
nsites
sz.obs
sz.pred
for(i in 1:sizes){  # pulls sites specific, year observed data for all sizes
for (s in 1:nsites){
sz.pred[s,i] <- median(predout[i,,s,years[s]], na.rm = T)*(trans_area[s]*3) #size 1 at site s, in first year
}
}
plot(sz.obs,
sz.pred,
xlab = "Observed Values",
ylab = "Predicted Values",)
library(tidyverse)
library(dplyr)
library(readxl)
library(ggplot2)
setwd("~/Desktop/Github/Barrels")
# Load in data
data <- read_xlsx("Barrel_Data_2023_FINAL.xlsx")
soil_data <- read_xlsx("Barrel_Data_2023_FINAL.xlsx", sheet = 2)
soil_data <- soil_data %>%
relocate(DATE...16, .after = VWC...17)
data <- read_xlsx("Barrel_Data_2023_FINAL.xlsx")
soil_data <- read_xlsx("Barrel_Data_2023_FINAL.xlsx", sheet = 2)
soil_data <- soil_data %>%
relocate(DATE...16, .after = VWC...17)
#RENAME COLUMNS
data <- data %>%
rename( BARREL = `BARREL #`)
data <- data %>%
mutate(FLWR_1 = ifelse(is.na(FLWR_1), 0, FLWR_1),
FLWR_2 = ifelse(is.na(FLWR_2), 0, FLWR_2),
FLWR_3 = ifelse(is.na(FLWR_3), 0, FLWR_3),
FLWR_4 = ifelse(is.na(FLWR_4), 0, FLWR_4),
FLWR_5 = ifelse(is.na(FLWR_5), 0, FLWR_5),
FLWR_6 = ifelse(is.na(FLWR_6), 0, FLWR_6),
FLWR_7 = ifelse(is.na(FLWR_7), 0, FLWR_7),
FLWR_8 = ifelse(is.na(FLWR_8), 0, FLWR_8),
FLWR_9 = ifelse(is.na(FLWR_9), 0, FLWR_9))
######
# Seeds per barrel #
seeds <- tibble(ARTR = 230.6306526, ELEL = 105.168092, BRTE = 130, LAGL = 130.21, .rows = 2)
seeds
