}
szout <- numeric(6)
########## start TIME loop ############
for(t in 1: yrs_max){
if (t == 1){
for (y in 1:classes){
szout[y]=SdData[s]*grow_1[y,1]*surv[y] #First year recruits from seed-- new recruits grow then survive.
}
}
else{
szout = kern%*%szout
}
predout[,p,s,t] <- szout
}######## end TIME loop ###########
} ####### end SITE loop #########
print(p)
} ####### end PARAMETER loop #########
######################################################
sz.pred = matrix(NA, nrow =nsites , ncol = sizes)
for(i in 1:sizes){  # pulls sites specific, year observed data for all sizes
for (s in 1:nsites){
sz.pred[s,i] <- median(predout[i,,s,years[s]])*(trans_area[s]) #size 1 at site s, in first year
}
}
# observed data
sz.obs = matrix(NA, nrow =nsites , ncol = sizes)
for(i in 1:nsites){
sz.obs[i,1] <- ARTR.all$HeightClass_2.5cm[i]
sz.obs[i,2] <- ARTR.all$HeightClass_10cm[i]
sz.obs[i,3] <- ARTR.all$HeightClass_22.5cm[i]
sz.obs[i,4] <- ARTR.all$HeightClass_52.5cm[i]
sz.obs[i,5] <- ARTR.all$HeightClass_97.5cm[i]
sz.obs[i,6] <- ARTR.all$HeightClass_120cm[i]
}
plot((c(sz.obs)+1),
(c(sz.pred)+1),
xlab = "Observed Values",
ylab = "Predicted Values",
main = "Temp Max, spatial model",
pch = 16, cex = 0.65,
col = "darkslateblue",
log = "xy",
xlim = c(1,250), ylim = c(1,250)) #  steelblue, darkslateblue, darkslateblue
abline(a = 0,
b = 1,
col = "brown3", # brown3, brown3, darkgoldenrod
lwd = 2)
####### Correlation of obs vs pred #######
r = cor(log(c(sz.pred)+1),log(c(sz.obs)+1))
print(r)
# load in  validation covariate data
load("~/Library/CloudStorage/GoogleDrive-mclyne@nevada.unr.edu/My Drive/Hatch/Hatch/Data/Data/Validation data/ARTR2 Data/Validation covariate env.RData")
load("~/Library/CloudStorage/GoogleDrive-mclyne@nevada.unr.edu/My Drive/Hatch/Hatch/Data/Model Outputs/Spatial models/Spatial with Knots/FINAL/SWE_SPATIAL.RData")
#extract parameters
params <- rstan::extract(SWEmodel, c( "bclimg","bclimf","bclims", "survb0", "survbS", "growb0", "growbS",
"fecdb0", "fecdbS","growS", "Galpha", "Fs" , "Salpha", "sigmaG", "sigmaS", "sigmaF"))
# for spatial models we need to extract
params
bclimg = params$bclimg
bclimf = params$bclimf
bclims = params$bclims
growb0 = params$growb0
growbs = params$growbS
growS = params$growS
survb0 = params$survb0
survbS = params$survbS
fecdb0 = params$fecdb0
fecdbS = params$fecdbS
Galpha = params$Galpha #this changes to alpha in spatial models
Salpha = params$Salpha #this changes to alpha in spatial models
Fs = params$Fs
sigmaG = params$sigmaG
sigmaS = params$sigmaS
length(ARTR.all$PlotID)
nsites
s = nsites = length(ARTR.all$PlotID) #  number of sites
classes = 6
cov_sub
p = length(cov_sub) #number of covariates
years = (ARTR.all$Date_sampled - ARTR.all$`Fire year`)+1#years between fire and monitoring
yrs_max = max(years)
w = ARTR.all$PLS_lbs_acre*453592.37 #lbs to mg
I = w / 2.5 #divide by seed weight for individual total
SdData = I*0.0123553 #50 square meters in an acre
#ending size distribution for sites
Mmid = (c(2.5,10,22.5,52.5,97.5,142.5)) - mean((c(2.5,10,22.5,52.5,97.5,142.5)))
elev <- ARTR.all$Elev
elev <- scale(elev) ### come back and fix this//// restandardize
X_sub
X_sub = matrix(data=NA, nrow = nsites, ncol = 1 )
row.names(X_sub) = c(ARTR.all$PlotID)
colnames(X_sub) = c("SWE")
X_sub[,1] <- stand.df$swe
stand.df$swe
cov_sub <- 1 # using just one covariate
str(X_sub)
X = X_sub #climate data for sites
area = ARTR.all$SearchArea_m2 # transect area
area
X_sub
siteloc <- plotloc # validation site locations
colnames(siteloc) <- c("Long","Lat")
dG<-as.matrix(dist(rbind(siteloc,knotloc.SWEG),upper=T,diag=T)) ### Find distance between all points and knots
dG<-dG[-((nsites+1):(nsites+nknotsG)),-(1:nsites)] # using 2wayints model and growth
dS<-as.matrix(dist(rbind(siteloc,knotloc.SWES),upper=T,diag=T)) ### Find distance between all points and knots
dS<-dS[-((nsites+1):(nsites+nknotsS)),-(1:nsites)] # using 2wayints model and survival
WG<-exp(-dG/phiG)
WS<-exp(-dS/phiS)
Kg<-t(t(WG)/apply(WG,2,sum)) ##normalize kernel ###"t" is the transpose which flips matrix to make sure division is applied across columns. R does row-wise by default
apply(Kg,2,sum)###check that all columns sum to 1
Ks<-t(t(WS)/apply(WS,2,sum)) ##normalize kernel ###"t" is the transpose which flips matrix to make sure division is applied across columns. R does row-wise by default
apply(Ks,2,sum)###check that all columns sum to 1
nknotsS
nknotsG
# ___________________________ Forecast ___________________________
# create predout array
predout <- array(NA, dim = c(6, length(bclimg),nsites, yrs_max)) # yrs will only be for model fit, will need to add years for forecast?
#### Parameter loop (p) #######
for(p in 1:length(bclimg)){
Gs = Kg%*%(Galpha[p,]*sigmaG[p])
Ss = Ks%*%(Salpha[p,] *sigmaS[p])
############# start site loop (site = s) ##############
for (s in 1:nsites) {
mug <- grow(growb0[p], growbs[p], bclimg[p,], X_sub[s,], Mmid, Gs[s])
surv <- survive(survb0[p], survbS[p], bclims[p,], X_sub[s,], Mmid, Ss[s])
fec <- fecund(fecdb0[p], fecdbS[p], bclimf[p,], X_sub[s,], Mmid, 0) # set Fs to 0 for out-of-sample forecasts
#come up with all the ways plants can get to size Y, given it started in column X
#/loop over all combos of size class x and y
grow_mat <- matrix(0,sizes, sizes)
for (y in 1:classes){ #loop over all combos of size STARTING with Y
for (x in 1:classes){ # running through all the X given a fixed Y
grow_mat[y,x]= dnorm(Mmid[y], mug[x], growS[s])
#Calculate probability of transitioning from one size class [x] to another [y]
}
}
#re-normalize by columns
grow_1 <- matrix(0, classes, classes)
##Loop back over x (columns) to normalize
for (x in 1:classes){
##pulls out column and summing all the X's
grow_1[,x]=grow_mat[,x]/sum(grow_mat[,x]) #normalize each column (x) to sum to 1
}
kern <- matrix(0, classes, classes) #density kernal that combines all vital rates
for (y in 1:classes){ #come up with all the ways plants can get to size Y, given it started in column X
for (x in 1:classes){ # loops over size classes to construct kernal
# come up with all the ways plants can get to size Y, given it started in column X
kern[y,x] = grow_1[y,x]*surv[x]+fec[x]*grow_1[y,1]*surv[y] #construct kernal
}
}
szout <- numeric(6)
########## start TIME loop ############
for(t in 1: yrs_max){
if (t == 1){
for (y in 1:classes){
szout[y]=SdData[s]*grow_1[y,1]*surv[y] #First year recruits from seed-- new recruits grow then survive.
}
}
else{
szout = kern%*%szout
}
predout[,p,s,t] <- szout
}######## end TIME loop ###########
} ####### end SITE loop #########
print(p)
} ####### end PARAMETER loop #########
source("forecast functions.R")
#### Parameter loop (p) #######
for(p in 1:length(bclimg)){
Gs = Kg%*%(Galpha[p,]*sigmaG[p])
Ss = Ks%*%(Salpha[p,] *sigmaS[p])
############# start site loop (site = s) ##############
for (s in 1:nsites) {
mug <- grow(growb0[p], growbs[p], bclimg[p,], X_sub[s,], Mmid, Gs[s])
surv <- survive(survb0[p], survbS[p], bclims[p,], X_sub[s,], Mmid, Ss[s])
fec <- fecund(fecdb0[p], fecdbS[p], bclimf[p,], X_sub[s,], Mmid, 0) # set Fs to 0 for out-of-sample forecasts
#come up with all the ways plants can get to size Y, given it started in column X
#/loop over all combos of size class x and y
grow_mat <- matrix(0,sizes, sizes)
for (y in 1:classes){ #loop over all combos of size STARTING with Y
for (x in 1:classes){ # running through all the X given a fixed Y
grow_mat[y,x]= dnorm(Mmid[y], mug[x], growS[s])
#Calculate probability of transitioning from one size class [x] to another [y]
}
}
#re-normalize by columns
grow_1 <- matrix(0, classes, classes)
##Loop back over x (columns) to normalize
for (x in 1:classes){
##pulls out column and summing all the X's
grow_1[,x]=grow_mat[,x]/sum(grow_mat[,x]) #normalize each column (x) to sum to 1
}
kern <- matrix(0, classes, classes) #density kernal that combines all vital rates
for (y in 1:classes){ #come up with all the ways plants can get to size Y, given it started in column X
for (x in 1:classes){ # loops over size classes to construct kernal
# come up with all the ways plants can get to size Y, given it started in column X
kern[y,x] = grow_1[y,x]*surv[x]+fec[x]*grow_1[y,1]*surv[y] #construct kernal
}
}
szout <- numeric(6)
########## start TIME loop ############
for(t in 1: yrs_max){
if (t == 1){
for (y in 1:classes){
szout[y]=SdData[s]*grow_1[y,1]*surv[y] #First year recruits from seed-- new recruits grow then survive.
}
}
else{
szout = kern%*%szout
}
predout[,p,s,t] <- szout
}######## end TIME loop ###########
} ####### end SITE loop #########
print(p)
} ####### end PARAMETER loop #########
#####################################################
sz.pred = matrix(NA, nrow =nsites , ncol = sizes)
for(i in 1:sizes){  # pulls sites specific, year observed data for all sizes
for (s in 1:nsites){
sz.pred[s,i] <- median(predout[i,,s,years[s]])*(trans_area[s]) #size 1 at site s, in first year
}
}
# observed data
sz.obs = matrix(NA, nrow =nsites , ncol = sizes)
for(i in 1:nsites){
sz.obs[i,1] <- ARTR.all$HeightClass_2.5cm[i]
sz.obs[i,2] <- ARTR.all$HeightClass_10cm[i]
sz.obs[i,3] <- ARTR.all$HeightClass_22.5cm[i]
sz.obs[i,4] <- ARTR.all$HeightClass_52.5cm[i]
sz.obs[i,5] <- ARTR.all$HeightClass_97.5cm[i]
sz.obs[i,6] <- ARTR.all$HeightClass_120cm[i]
}
plot((c(sz.obs)+1),
(c(sz.pred)+1),
xlab = "Observed Values",
ylab = "Predicted Values",
main = "SWE, spatial model",
pch = 16, cex = 0.65,
col = "darkslateblue",
log = "xy",
xlim = c(1,250), ylim = c(1,250)) #  steelblue, darkslateblue, darkslateblue
abline(a = 0,
b = 1,
col = "brown3", # brown3, brown3, darkgoldenrod
lwd = 2)
####### Correlation of obs vs pred #######
r = cor(log(c(sz.pred)+1),log(c(sz.obs)+1))
print(r)
nsites
###############################
######  Forecast script  ######
###############################
library(boot)
library(readxl)
library(tidyverse)
library(sf)
library(rstan)
# Set WD and load in functions
setwd("~/Desktop/Github/Sageforecast/Forecasts/out-of-sample forecasts/Spatial")
source("forecast functions.R")
# load in  validation covariate data
load("~/Library/CloudStorage/GoogleDrive-mclyne@nevada.unr.edu/My Drive/Hatch/Hatch/Data/Data/Validation data/ARTR2 Data/Validation covariate env.RData")
# Set WD and load in functions
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
source("forecast functions.R")
# load in model output
load("~/Library/CloudStorage/GoogleDrive-mclyne@nevada.unr.edu/My Drive/Hatch/Hatch/Data/Model Outputs/Non-Spatial/FINAL/2-way interations model.RData")
#load("~/Downloads/2-way interations model.RData")
#extract parameters
params <- rstan::extract(two_way_ints_all, c( "bclimg","bclimf","bclims", "survb0", "survbS", "growb0", "growbS",
"fecdb0", "fecdbS","growS", "Gs", "Fs" , "Ss", "sigmaG", "sigmaS", "sigmaF"))
#params
bclimg = params$bclimg
bclimf = params$bclimf
bclims = params$bclims
growb0 = params$growb0
growbs = params$growbS
growS = params$growS
survb0 = params$survb0
survbS = params$survbS
fecdb0 = params$fecdb0
fecdbS = params$fecdbS
Gs = params$Gs
Fs = params$Fs
Ss = params$Ss
sigmaG = params$sigmaG
sigmaS = params$sigmaS
sigmaF = params$sigmaF
######## Data ######
s = nsites #  number of sites
classes = 6
years = matrix(NA, nrow = nsites, ncol = 1)
years[,1] = yrs# years between fire and monitoring
yrs_max = max(years)
SdData = SdData[1:nsites] #PLS data
SzData = SzData[,1:nsites] #ending size distribution for sites
Mmid = (c(2.5,10,22.5,52.5,97.5,142.5)) - mean((c(2.5,10,22.5,52.5,97.5,142.5)))#midpoint for size-classes
X = X_sub #climate data for sites
area = trans_area # transect area
#############
# ___________________________ Forecast ___________________________
# create predout array
predout <- array(NA, dim = c(6, length(bclimg[,1]),nsites, yrs_max)) # yrs will only be for model fit, will need to add years for forecast?
#surv.out <- matrix(data = NA, nrow = nsites, ncol = sizes)
#### Parameter loop (p) #######
for(p in 1:length(bclimg[,1])){
############# start site loop (site = s) ##############
for (s in 1:nsites) {
mug <- grow(growb0[p], growbs[p], bclimg[p,], X_sub[s,], Mmid, Gs[p,s]*sigmaG[p])
surv <- survive(survb0[p], survbS[p], bclims[p,], X_sub[s,], Mmid, Ss[p,s]*sigmaS[p])
#surv.out[s,] <- surv
fec <- fecund(fecdb0[p], fecdbS[p], bclimf[p,], X_sub[s,], Mmid, Fs[p,s]*sigmaF[p])
#come up with all the ways plants can get to size Y, given it started in column X
#/loop over all combos of size class x and y
grow_mat <- matrix(0,sizes, sizes)
for (y in 1:classes){ #loop over all combos of size STARTING with Y
for (x in 1:classes){ # running through all the X given a fixed Y
grow_mat[y,x]= dnorm(Mmid[y], mug[x], growS[s])
#Calculate probability of transitioning from one size class [x] to another [y]
}
}
#re-normalize by columns
grow_1 <- matrix(0, classes, classes)
##Loop back over x (columns) to normalize
for (x in 1:classes){
##pulls out column and summing all the X's
grow_1[,x]=grow_mat[,x]/sum(grow_mat[,x]) #normalize each column (x) to sum to 1
}
kern <- matrix(0, classes, classes) #density kernal that combines all vital rates
for (y in 1:classes){ #come up with all the ways plants can get to size Y, given it started in column X
for (x in 1:classes){ # loops over size classes to construct kernal
# come up with all the ways plants can get to size Y, given it started in column X
kern[y,x] = grow_1[y,x]*surv[x]+fec[x]*grow_1[y,1]*surv[y] #construct kernal
}
}
szout <- numeric(6)
########## start TIME loop ############
for(t in 1: yrs_max){
if (t == 1){
for (y in 1:classes){
szout[y]=SdData[s]*grow_1[y,1]*surv[y] #First year recruits from seed-- new recruits grow then survive.
}
}
else{
szout = kern%*%szout
}
predout[,p,s,t] <- szout
}######## end TIME loop ###########
} ####### end SITE loop #########
print(p)
} ####### end PARAMETER loop #########
####################################################
###### Plot predicted size structure vs true data ####
######################################################
sz.pred = matrix(NA, nrow =nsites , ncol = sizes)
for(i in 1:sizes){  # pulls sites specific, year observed data for all sizes
for (s in 1:nsites){
sz.pred[s,i] <- median(predout[i,,s,years[s]])*(trans_area[s]) #size 1 at site s, in first year
}
}
# observed data
sz.obs = matrix(NA, nrow =nsites , ncol = sizes)
for(i in 1:nsites){
sz.obs[i,1] <- plotdata$nARTR2_L5cm[i]
sz.obs[i,2] <- plotdata$nARTR2_5_15cm[i]
sz.obs[i,3] <- plotdata$nARTR2_15_30cm[i]
sz.obs[i,4] <- plotdata$nARTR2_30_75cm[i]
sz.obs[i,5] <- plotdata$nARTR2_75_120cm[i]
sz.obs[i,6] <- plotdata$nARTR2_G120cmHt[i]
}
plot((c(sz.obs)+1),
(c(sz.pred)+1),
xlab = "Observed Values",
ylab = "Predicted Values",
main = "All Covariates model",
pch = 16, cex = 0.65,
col = "darkslateblue",
log = "xy",
xlim = c(1,250), ylim = c(1,250)) #  steelblue, darkslateblue, darkslateblue
abline(a = 0,
b = 1,
col = "brown3", # brown3, brown3, darkgoldenrod
lwd = 2)
####### Correlation of obs vs pred #######
r = cor(log(c(sz.pred)+1),log(c(sz.obs)+1))
print(r)
setwd("/Users/michaelotisclyne/Desktop/Github/Barrels")
data <- read.csv("barrel_data_all.csv")
data
View(data)
data2 <- read.csv("Barrel_Data_2023_FINAL.xlsx")
data2 <- read.xlsx("Barrel_Data_2023_FINAL.xlsx")
library(readxl)
data2 <- read.xlsx("Barrel_Data_2023_FINAL.xlsx")
data2 <- read.xlxs("Barrel_Data_2023_FINAL.xlsx")
data2 <- read_xlsx("Barrel_Data_2023_FINAL.xlsx")
View(data2)
########################
### Barrel Data 2023 ###
########################
library(tidyverse)
library(dplyr)
library(readxl)
library(ggplot2)
setwd("~/Desktop/Github/Barrels")
# Load in data
data <- read_xlsx("Barrel_Data_2023_FINAL.xlsx")
soil <- read_xlsx("Barrel_Data_2023_FINAL.xlsx", sheet = 2)
brte.indv <- read_xlsx("Barrel_Data_2023_FINAL.xlsx", sheet = 3)
# data <- read_xlsx("Barrel_Data_2023_CLYNE_RD.xlsx", sheet = 1)
# soil <- read_xlsx("Barrel_Data_2023_CLYNE_RD.xlsx", sheet = 2)
# Change inflorescence NAs to 0's
data <- data %>%
mutate(FLWR_1 = ifelse(is.na(FLWR_1), 0, FLWR_1),
FLWR_2 = ifelse(is.na(FLWR_2), 0, FLWR_2),
FLWR_3 = ifelse(is.na(FLWR_3), 0, FLWR_3),
FLWR_4 = ifelse(is.na(FLWR_4), 0, FLWR_4),
FLWR_5 = ifelse(is.na(FLWR_5), 0, FLWR_5),
FLWR_6 = ifelse(is.na(FLWR_6), 0, FLWR_6),
FLWR_7 = ifelse(is.na(FLWR_7), 0, FLWR_7),
FLWR_8 = ifelse(is.na(FLWR_8), 0, FLWR_8),
FLWR_9 = ifelse(is.na(FLWR_9), 0, FLWR_9))
data <- data %>% # Remove all Unknown plants
subset(., SPECIES != "U") %>%
subset(., SPECIES !="UG") %>%
subset(., SPECIES != "UD")
########
# create Life History  and Native vs invasive columns
data <- data %>%
mutate(., LH = SPECIES) %>% # Create dummy column
mutate(., LH = ifelse(LH=="ELEL", "MEDIUM", "FAST")) %>% # create fast and medium
relocate(LH, .before = `PLANT ID`) %>% # relocate LH col to beginning
mutate(data, NvI = SPECIES) %>% # another dummy col to set up mutate
mutate(., NvI = ifelse(NvI == "BRTE", "INVASIVE", "NATIVE")) %>% # Create Native vs Invasive
relocate(NvI, .before = `PLANT ID` )
##############################################
### Merge the soil moisture data by Barrel ###
##############################################
# create a named vector
lookup <- c(BARREL = "BARREL", VWC_2 =  "VWC...2", VWC_3 = "VWC...4", VWC_4 = "VWC...6",  VWC_5 = "VWC...8",
VWC_6 ="VWC...10",  VWC_7 = "VWC...12", VWC_8 = "VWC...14", VWC_9 = "VWC...16")
soil <- soil %>%
select(., BARREL, contains("VWC")) %>% #select only VWC columns
rename(., all_of(lookup)) # rename by the named vector to match the time period of plant data collection
data <- data %>%
full_join(soil, by = "BARREL")
##################################################
############ Clean up the BRTE data ##############
##################################################
col_FLWR <- c("FLWR_1", "FLWR_2", "FLWR_3", "FLWR_4","FLWR_5", "FLWR_6","FLWR_7","FLWR_8", "FLWR_9")
data <- data %>%
mutate(., FLWRTotal =  apply(data[c(col_FLWR)], 1, max ))
#brte.indv <- brte.indv[complete.cases(brte.indv),] # for when the weighing of BRTE seeds wasn't done
# 1. BRTE is currently per barrel, not per individual. Need to back-calculate weight total to # of seeds/ individual.
barr.spec.sum <- data %>% # Creates DF for # of inflorescence total per barrel.
select(., BARREL, SPECIES, FLWRTotal) %>%
mutate(., FLWRTotal =  as.numeric(FLWRTotal)) %>%
group_by(BARREL, SPECIES) %>%
dplyr::summarize(., FLWRSUM = sum(FLWRTotal))
# Take barr.spec.sum to back-calculate number of seeds per inflorescense of BRTE
# Need to match up
check <- barr.spec.sum %>%
filter(., SPECIES == "BRTE")
brte.inf.seeds <- cbind(check, brte.indv$SEEDS) # Uh OH, lengths don't match
mismatch <- dplyr::anti_join(check, brte.indv) # find which barrel had BRTE encountered that wasn't seeded with BRTE???
col_FLWR <- c("FLWR_1", "FLWR_2", "FLWR_3", "FLWR_4","FLWR_5", "FLWR_6","FLWR_7","FLWR_8", "FLWR_9")
data <- data %>%
mutate(., FLWRTotal =  apply(data[c(col_FLWR)], 1, max ))
### Create new column for inflorescence total per individual
data <- data %>%
mutate(SEEDTotal = as.numeric(FLWRTotal))
#Edit this to have exact seed output per plant
for(i in 1:length(data$BARREL)){
if(data$SPECIES[i] == "LAGL"){
data$SEEDTotal[i] <-  (data$FLWRTotal[i]*39)
}
if(data$SPECIES[i] == "ELEL"){
data$SEEDTotal[i] <-  (data$FLWRTotal[i]*93)
}
if(data$SPECIES[i] == "BRTE"){
data$SEEDTotal[i] <-  (data$FLWRTotal[i]*88)
}
}
data$SPECIES[i] == "LAGL"
length(data$BARREL)
i
data$SPECIES[i] == "ELEL"
data$SPECIES[i] == "BRTE"
data
View(data)
for(i in 1:length(data$BARREL)){
if(data$SPECIES[i] == "LAGL"){
data$SEEDTotal[i] <-  (data$FLWRTotal[i]*39)
}
if(data$SPECIES[i] == "ELEL"){
data$SEEDTotal[i] <-  (data$FLWRTotal[i]*93)
}
if(data$SPECIES[i] == "BRTE"){
data$SEEDTotal[i] <-  (data$FLWRTotal[i]*88)
}
}
if(data$SPECIES[i] == "LAGL"){
data$SEEDTotal[i] <-  (data$FLWRTotal[i]*39)
}
if(data$SPECIES[i] = "LAGL"){
if(data$SPECIES[i] == LAGL)
if(data$SPECIES[i] == LAGL){
data$SEEDTotal[i] <-  (data$FLWRTotal[i]*39)
}
View(data)
#write.csv(data, file = "CLYNE_DATA_RD2024.csv", row.names = F)
write.csv(data, file = "barrel_data_all.csv", row.names = F) # create .csv for Research Design class
View(data)
